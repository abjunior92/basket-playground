// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Playground {
  id      String   @id @default(uuid())
  name    String
  groups  Group[]
  matches Match[]
  jerseys JerseyStock[]
  players Player[]
  teams  Team[]
  threePointChallengeParticipants ThreePointChallengeParticipant[]
}

model Group {
  id       String   @id @default(uuid())
  name     String
  color    ColorGroup   @unique
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  teams  Team[]
}

enum ColorGroup {
  red
  blue
  green
  light_green
  yellow
  purple
  orange
  pink
  gray
  black
  white
  brown
  cyan
}

model Team {
  id       String   @id @default(uuid())
  name     String
  group    Group   @relation(fields: [groupId], references: [id])
  groupId  String

  // Riferimento diretto al playground
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String

  matchesAsTeam1 Match[] @relation(name: "Team1Matches")
  matchesAsTeam2 Match[] @relation(name: "Team2Matches")

  players  Player[]

  refPhoneNumber String?
}

model Player {
  id           String  @id @default(uuid())
  name         String
  surname      String
  birthYear    Int
  level        Level
  paid         Boolean
  totalPoints  Int     @default(0)
  team         Team    @relation(fields: [teamId], references: [id])
  teamId       String
  matchStats PlayerMatchStats[]
  size         Sizes?

  // Riferimento diretto al playground
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  
  warnings     Int     @default(0)  // Numero di ammonizioni ricevute
  isExpelled   Boolean @default(false) // Espulsione dal torneo
  retired     Boolean @default(false) // Giocatore ritirato dal torneo
  threePointChallengeParticipants ThreePointChallengeParticipant[]
}

enum Sizes {
  xsmall
  small
  medium
  large
  xlarge
  xxlarge
  xxxlarge
}

enum Level {
  serie_b
  serie_c
  serie_d
  prima_divisione
  promozione
  u15
  u17
  u19
  u20
  over
  mai_giocato
  free_agent
  csi
  campetto
  basket2all
}

model Match {
  id           String   @id @default(uuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  day          Int
  timeSlot     String
  field        String

  team1       Team @relation(name: "Team1Matches", fields: [team1Id], references: [id])
  team1Id     String
  team2       Team @relation(name: "Team2Matches", fields: [team2Id], references: [id])
  team2Id     String

  score1      Int?
  score2      Int?
  winner      String?

  playerStats PlayerMatchStats[]

  @@unique([playgroundId, day, timeSlot, field]) // Evita partite duplicate sullo stesso campo e orario
}

model PlayerMatchStats {
  id        String   @id @default(uuid())
  matchId   String
  playerId  String
  points    Int     @default(0)

  match     Match    @relation(fields: [matchId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])  // Definisce una combinazione unica di matchId e playerId
}

model JerseyStock {
  id        String  @id @default(uuid())
  playground  Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  size      Sizes   @unique
  available Int     @default(0)
  distributed Int   @default(0)

  @@unique([playgroundId, size]) // Evita doppioni per lo stesso playground
}

model ThreePointChallengeParticipant {
  id           String   @id @default(uuid())
  name         String
  surname      String
  score        Int      @default(0)
  fee          Int
  
  player       Player?   @relation(fields: [playerId], references: [id])
  playerId     String?   

  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}